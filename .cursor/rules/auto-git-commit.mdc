---
description: 
globs: 
alwaysApply: false
---
# 自动 Git 提交规则

## 核心规则 ⚠️ **强制执行**

AI助手在完成任何代码修改、新增文件或删除文件后，**必须**自动执行以下Git操作：

1. **git add** - 添加所有变更到暂存区
2. **git commit** - 提交变更并附上清晰的提交信息

## 执行时机

### 必须执行自动提交的情况
- ✅ 新增任何文件（代码文件、配置文件、文档等）
- ✅ 修改任何现有文件
- ✅ 删除任何文件
- ✅ 重命名或移动文件
- ✅ 修改文件权限

### 执行顺序
1. **完成代码修改** - 使用编辑工具完成所有必要的代码变更
2. **记录变更日志** - 按照 [变更跟踪规则](mdc:.cursor/rules/change-tracking.mdc) 更新 README.md
3. **执行 Git 添加** - `git add .` 或 `git add <具体文件>`
4. **执行 Git 提交** - `git commit -m "提交信息"`

## 提交信息规范

### 提交信息格式
```
<类型>: <简短描述>

<详细描述>（可选）
```

### 提交类型
- `feat` - 新功能
- `fix` - Bug修复
- `docs` - 文档更新
- `style` - 代码格式化（不影响代码逻辑）
- `refactor` - 代码重构
- `test` - 添加或修改测试
- `chore` - 构建过程或辅助工具的变动
- `perf` - 性能优化
- `ci` - CI配置文件和脚本的变动

### 提交信息示例
```bash
# 单个文件修改
git commit -m "feat: 添加用户资料页面组件

- 新增UserProfile组件显示用户基本信息
- 集成头像上传功能
- 添加表单验证"

# 多个文件修改
git commit -m "refactor: 重构用户认证系统

- 更新登录和注册组件
- 添加JWT token处理
- 优化错误处理逻辑"

# Bug修复
git commit -m "fix: 修复用户登录状态丢失问题

解决页面刷新后用户需要重新登录的问题"

# 文档更新
git commit -m "docs: 更新API文档和使用说明"
```

## 自动提交命令模板

### 基础命令序列
```bash
# 1. 添加所有变更
git add .

# 2. 提交变更
git commit -m "<类型>: <描述>"
```

### 针对不同变更类型的模板

#### 新增功能
```bash
git add .
git commit -m "feat: 实现[功能名称]

- 具体实现的功能点1
- 具体实现的功能点2"
```

#### 修复问题
```bash
git add .
git commit -m "fix: 修复[问题描述]

原因：[问题原因]
解决方案：[解决方法]"
```

#### 代码重构
```bash
git add .
git commit -m "refactor: 重构[模块/组件名称]

- 改进了代码结构
- 提高了可维护性"
```

## 实际执行流程

### AI助手操作步骤
1. **检查当前Git状态**
   ```bash
   git status
   ```

2. **添加变更到暂存区**
   ```bash
   git add .
   ```

3. **生成合适的提交信息**
   - 根据变更内容确定提交类型
   - 编写清晰的提交描述
   - 包含主要变更点

4. **执行提交**
   ```bash
   git commit -m "提交信息"
   ```

5. **确认提交成功**
   ```bash
   git log --oneline -1
   ```

## 特殊情况处理

### 配置文件变更
```bash
git add .
git commit -m "chore: 更新项目配置

- 更新package.json依赖版本
- 修改webpack配置"
```

### 多个不相关的变更
如果一次性包含多个不相关的变更，使用通用的提交信息：
```bash
git add .
git commit -m "feat: 实现多个功能改进

- 添加了用户资料页面
- 修复了登录bug
- 更新了文档"
```

### 仅文档变更
```bash
git add .
git commit -m "docs: 更新项目文档

- 完善README.md说明
- 添加API使用示例"
```

## 错误处理

### 提交失败的处理
如果提交失败，AI助手应该：
1. 检查错误信息
2. 尝试解决常见问题（如文件冲突）
3. 如果无法自动解决，向用户说明情况

### 常见错误和解决方案
- **未初始化Git仓库**: 先执行 `git init`
- **没有设置用户信息**: 提醒用户设置 `git config`
- **文件冲突**: 说明冲突情况，建议用户手动处理

## 验证和反馈

### 提交后验证
- 确认文件已成功提交
- 检查提交历史记录
- 验证工作目录是否干净

### 向用户反馈
```
✅ 代码修改完成
✅ 变更日志已更新
✅ Git提交成功: feat: 添加用户资料页面组件
📊 提交哈希: a1b2c3d
```

## 注意事项

- **每次修改都要提交** - 不能积累多次修改后才提交
- **提交信息要有意义** - 让其他开发者能理解做了什么
- **保持提交粒度适中** - 一个提交对应一个功能点或修复
- **遵循项目规范** - 如果项目有特定的提交规范，优先遵循项目规范

## 与其他规则的协作

- 此规则与 [变更跟踪规则](mdc:.cursor/rules/change-tracking.mdc) 配合使用
- 遵循 [开发工作流程](mdc:.cursor/rules/development-workflow.mdc) 的整体要求
- 提交信息可以参考 [代码规范](mdc:.cursor/rules/coding-standards.mdc) 的要求
