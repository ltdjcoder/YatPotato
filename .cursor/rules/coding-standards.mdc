---
description: 
globs: 
alwaysApply: false
---
# 代码规范和质量标准

## JavaScript/React 代码风格

### 命名约定
- **变量和函数**: camelCase (例如: `getUserData`, `isVisible`)
- **常量**: UPPER_SNAKE_CASE (例如: `API_BASE_URL`, `MAX_RETRY_COUNT`)
- **组件**: PascalCase (例如: `DataStorageDemo`, `UserProfile`)
- **文件名**: camelCase 或 PascalCase，保持一致性

### 代码格式化
- 使用 2 空格缩进
- 行末不留空格
- 文件末尾保留一个空行
- 字符串优先使用单引号，JSX 属性使用双引号

### 函数和组件
```javascript
// 推荐：箭头函数用于简单组件
const SimpleComponent = () => {
  return <div>Hello World</div>;
};

// 推荐：function 声明用于复杂组件
function ComplexComponent({ prop1, prop2 }) {
  const [state, setState] = useState(null);
  
  useEffect(() => {
    // 副作用逻辑
  }, []);
  
  return (
    <div>
      {/* JSX 内容 */}
    </div>
  );
}
```

## 依赖管理

### 导入顺序
1. React 相关导入
2. 第三方库导入
3. 本地组件导入
4. 工具函数导入
5. 样式文件导入

```javascript
import React, { useState, useEffect } from 'react';
import { someLibrary } from 'third-party-lib';
import MyComponent from './components/MyComponent';
import { utilityFunction } from './utils/helpers';
import './App.css';
```

### 包版本管理
- 使用 `package-lock.json` 锁定依赖版本
- 定期更新依赖，但确保测试通过
- 避免使用 `^` 或 `~` 进行自动版本更新

## 错误处理

### React 组件错误处理
```javascript
// 使用 try-catch 处理异步操作
const handleAsyncOperation = async () => {
  try {
    const result = await someAsyncFunction();
    setState(result);
  } catch (error) {
    console.error('操作失败:', error);
    // 适当的错误处理
  }
};
```

### Electron 错误处理
- 在主进程中捕获和记录错误
- 使用适当的错误边界处理渲染进程错误
- 提供用户友好的错误消息

## 代码注释

### 何时添加注释
- 复杂的业务逻辑
- 非显而易见的算法实现
- 重要的配置或常量
- 临时解决方案或已知问题

### 注释风格
```javascript
/**
 * 计算用户权限级别
 * @param {Object} user - 用户对象
 * @param {string} user.role - 用户角色
 * @param {Array} user.permissions - 用户权限列表
 * @returns {number} 权限级别 (1-10)
 */
function calculatePermissionLevel(user) {
  // TODO: 优化权限计算算法
  // 实现逻辑...
}
```

## 性能考虑

### React 性能优化
- 合理使用 `useMemo` 和 `useCallback`
- 避免在渲染函数中创建新对象
- 使用 `React.memo` 优化组件重渲染
- 懒加载大型组件

### Electron 性能优化
- 避免在主进程中执行耗时操作
- 合理使用 Worker 线程处理计算密集型任务
- 优化预加载脚本的体积
- 监控内存使用情况
