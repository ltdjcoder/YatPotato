/**
 * this code is generated by AI basically
 */

import { loadLocalServer } from './LocalServer.js';
import { merge } from './MergeTest.js';
import { bindNewArrayElement } from './MergeTest.js';
import { diffAndPairWithUpdateTime, removeUpdateTime } from './Diff.js';
import { getConfig } from './config.js';

import express from 'express';
import http from 'http';
import { WebSocketServer } from 'ws';
import fs from 'fs';
import path from 'path';
import crypto from 'crypto';
import session from 'express-session';
import fileStoreFactory from 'session-file-store';
import bodyParser from 'body-parser';
import { fileURLToPath } from 'url';




const FileStore = fileStoreFactory(session);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 加载配置
const config = getConfig();
console.log('[RemoteServer] 配置已加载:', {
  serverUrl: config.server.url,
  port: config.server.port,
  dataDir: config.data.dataDir,
  sessionDir: config.data.sessionDir
});

// 配置
const CONFIG = {
  PORT: config.server.port,
  SESSION_SECRET: config.session.secret,
  DATA_DIR: config.data.dataDir,
  SESSION_DIR: config.data.sessionDir
};

// 确保数据目录存在
if (!fs.existsSync(CONFIG.DATA_DIR)) {
  fs.mkdirSync(CONFIG.DATA_DIR, { recursive: true });
}

// 用户存储 (实际应用中应使用数据库)
const users = new Map();
// 添加一些测试用户
users.set('admin', { username: 'admin', password: '123456', role: 'admin' });
users.set('test', { username: 'test', password: '123456', role: 'user' });
users.set('user1', { username: 'user1', password: '123456', role: 'user' });
users.set('user2', { username: 'user2', password: '123456', role: 'user' });
users.set('user3', { username: 'user3', password: '123456', role: 'user' });
// WebSocket连接跟踪
const userConnections = new Map();

// 创建Express应用
const app = express();
const server = http.createServer(app);
const wss = new WebSocketServer({ server, path: '/ws' });

// 配置中间件
app.use(bodyParser.json());
app.use(session({
  store: new FileStore({ path: CONFIG.SESSION_DIR }),
  secret: CONFIG.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  cookie: { 
    secure: process.env.NODE_ENV === 'production',
    maxAge: 24 * 60 * 60 * 1000 // 24小时
  }
}));

// 中间件 - 请求日志
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// 中间件 - 验证用户是否已登录
const authenticated = (req, res, next) => {
  if (req.session.userId) {
    next();
  } else {
    res.status(401).json({ success: false, message: "未登录" });
  }
};

// 数据存储工具
const dataStore = {
  // 保存数据
  save: function(userId, componentId, key, data) {
    const dir = path.join(CONFIG.DATA_DIR, userId, componentId);
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
    }
    const filePath = path.join(dir, `${key}.json`);
    fs.writeFileSync(filePath, JSON.stringify(data), 'utf8');
    return true;
  },
  
  // 加载数据
  load: function(userId, componentId, key) {
    const filePath = path.join(CONFIG.DATA_DIR, userId, componentId, `${key}.json`);
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    }
    return null;
  },
  
  // 列出组件或键
  list: function(userId, componentId = null) {
    const results = [];
    const userDir = path.join(CONFIG.DATA_DIR, userId);
    
    if (!fs.existsSync(userDir)) {
      return results;
    }
    
    if (componentId) {
      const componentDir = path.join(userDir, componentId);
      if (!fs.existsSync(componentDir)) {
        return results;
      }
      
      const files = fs.readdirSync(componentDir);
      files.forEach(file => {
        if (file.endsWith('.json')) {
          results.push(file.replace('.json', ''));
        }
      });
    } else {
      const components = fs.readdirSync(userDir);
      components.forEach(comp => {
        const componentDir = path.join(userDir, comp);
        if (fs.statSync(componentDir).isDirectory()) {
          results.push(comp);
        }
      });
    }
    
    return results;
  }
};

// API路由
// 1. 查询登录状态
app.get('/api/auth/status', (req, res) => {
  if (req.session.userId) {
    res.json({ 
      loggedIn: true, 
      userId: req.session.userId,
      role: users.get(req.session.userId).role
    });
  } else {
    res.json({ loggedIn: false });
  }
});

// 2. 登录（账号密码）
app.post('/api/auth/login', (req, res) => {
  const { username, password } = req.body;
  
  if (!username || !password) {
    return res.status(400).json({ 
      success: false, 
      message: "用户名和密码不能为空" 
    });
  }
  
  const user = users.get(username);
  
  if (user && user.password === password) {
    // 登录成功
    req.session.userId = username;
    req.session.role = user.role;
    
    res.json({ 
      success: true, 
      userId: username,
      role: user.role
    });
  } else {
    // 登录失败
    res.status(401).json({ 
      success: false, 
      message: "用户名或密码错误" 
    });
  }
});

// 登出
app.post('/api/auth/logout', (req, res) => {
  const wasLoggedIn = !!req.session.userId;
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({ 
        success: false, 
        message: "登出失败" 
      });
    }
    res.json({ success: true, wasLoggedIn });
  });
});

// 4. 加载数据端点
app.get('/api/data/:componentId/:key', authenticated, (req, res) => {
  const { componentId, key } = req.params;
  const userId = req.session.userId;
  
  try {
    const data = dataStore.load(userId, componentId, key);
    
    if (data !== null) {
      res.json({ 
        success: true, 
        data: data 
      });
      console.log(`数据已加载: ${userId}/${componentId}/${key}`);
    } else {
      res.status(404).json({ 
        success: false, 
        message: "数据不存在" 
      });
    }
  } catch (error) {
    console.error('数据加载错误:', error);
    res.status(500).json({ 
      success: false, 
      message: "数据加载失败" 
    });
  }
});

// 5. 列出组件中的键
app.get('/api/keys/:componentId', authenticated, (req, res) => {
  const { componentId } = req.params;
  const userId = req.session.userId;
  
  try {
    const keys = dataStore.list(userId, componentId);
    res.json({ 
      success: true, 
      keys: keys 
    });
    console.log(`列出键: ${userId}/${componentId}, 找到 ${keys.length} 个键`);
  } catch (error) {
    console.error('列出键错误:', error);
    res.status(500).json({ 
      success: false, 
      message: "列出键失败" 
    });
  }
});

// 6. 列出用户的所有组件
app.get('/api/components', authenticated, (req, res) => {
  const userId = req.session.userId;
  
  try {
    const components = dataStore.list(userId);
    res.json({ 
      success: true, 
      components: components 
    });
    console.log(`列出组件: ${userId}, 找到 ${components.length} 个组件`);
  } catch (error) {
    console.error('列出组件错误:', error);
    res.status(500).json({ 
      success: false, 
      message: "列出组件失败" 
    });
  }
});

// 3. 客户端存储数据 - 确保完整实现并添加WebSocket通知
app.post('/api/data/:componentId/:key', authenticated, (req, res) => {
  const { componentId, key } = req.params;
  const userId = req.session.userId;
  let data = req.body; // req.body is already parsed by bodyParser.json()
  
  try {
    const lastData = dataStore.load(userId, componentId, key);

    data = merge(lastData, data);

    dataStore.save(userId, componentId, key, data); // dataStore.save already handles JSON.stringify
    res.json({ success: true });
    
    // 通知该用户的WebSocket连接
    broadcastToUser(userId, {
      type: 'dataUpdate',
      componentId,
      key,
      timestamp: new Date().toISOString()
    });
    
    console.log(`数据已保存: ${userId}/${componentId}/${key}, 并发送WebSocket通知`);
  } catch (error) {
    console.error('数据保存错误:', error);
    res.status(500).json({ 
      success: false, 
      message: "数据保存失败" 
    });
  }
});

// 新增 - 删除数据端点
app.delete('/api/data/:componentId/:key', authenticated, (req, res) => {
  const { componentId, key } = req.params;
  const userId = req.session.userId;
  
  try {
    const filePath = path.join(CONFIG.DATA_DIR, userId, componentId, `${key}.json`);
    
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      
      res.json({ success: true });
      
      // 通知用户的WebSocket连接
      broadcastToUser(userId, {
        type: 'dataDelete',
        componentId,
        key,
        timestamp: new Date().toISOString()
      });
      
      console.log(`数据已删除: ${userId}/${componentId}/${key}, 并发送WebSocket通知`);
    } else {
      res.status(404).json({ 
        success: false, 
        message: "数据不存在" 
      });
    }
  } catch (error) {
    console.error('数据删除错误:', error);
    res.status(500).json({ 
      success: false, 
      message: "数据删除失败" 
    });
  }
});

// 新增 - 获取组件的所有用户（管理员专用）
app.get('/api/component/:componentId/users', authenticated, (req, res) => {
  const { componentId } = req.params;
  
  // 检查用户是否为管理员
  if (req.session.role !== 'admin') {
    return res.status(403).json({
      success: false,
      message: "权限不足，需要管理员权限"
    });
  }
  
  try {
    const componentDir = path.join(CONFIG.DATA_DIR, componentId);
    if (!fs.existsSync(componentDir)) {
      return res.json({ success: true, users: [] });
    }
    
    const users = fs.readdirSync(componentDir)
      .filter(item => fs.statSync(path.join(componentDir, item)).isDirectory());
    
    res.json({ success: true, users });
  } catch (error) {
    console.error('获取组件用户错误:', error);
    res.status(500).json({
      success: false,
      message: "获取用户列表失败"
    });
  }
});

// 增强WebSocket身份验证 - 添加token支持
wss.on('connection', (ws, req) => {
  let userId = null;
  let authenticated = false;
  
  ws.on('message', (message) => {
    try {
      const msg = JSON.parse(message);
      
      if (msg.type === 'auth') {
        const { username, password, token } = msg;
        
        // 支持两种认证方式：用户名密码或token
        if (token) {
          // 这里需要验证token的有效性
          // 实际应用中应使用JWT或其他安全令牌系统
          // 简化实现，假设token是有效的
          userId = username;
          authenticated = true;
        } else if (username && password) {
          const user = users.get(username);
          if (user && user.password === password) {
            userId = username;
            authenticated = true;
          } else {
            ws.send(JSON.stringify({
              type: 'auth_result',
              success: false,
              message: "用户名或密码错误"
            }));
            return;
          }
        } else {
          ws.send(JSON.stringify({
            type: 'auth_result',
            success: false,
            message: "认证信息不完整"
          }));
          return;
        }
        
        // 认证成功处理
        if (authenticated) {
          if (!userConnections.has(userId)) {
            userConnections.set(userId, new Set());
          }
          userConnections.get(userId).add(ws);
          
          ws.send(JSON.stringify({
            type: 'auth_result',
            success: true,
            userId,
            role: users.get(userId)?.role || 'user'
          }));
          
          console.log(`WebSocket: 用户 ${userId} 已认证`);
        }
        return;
      }
      
      // 要求先认证
      if (!authenticated) {
        ws.send(JSON.stringify({
          type: 'error',
          message: "请先进行身份认证"
        }));
        return;
      }
      
      // 处理其他类型消息
      console.log(`WebSocket: 收到来自 ${userId} 的消息:`, msg.type);
      
    } catch (error) {
      console.error("WebSocket消息处理错误:", error);
      ws.send(JSON.stringify({
        type: 'error',
        message: "消息格式错误"
      }));
    }
  });
  
  // 处理连接关闭
  ws.on('close', () => {
    if (userId && userConnections.has(userId)) {
      userConnections.get(userId).delete(ws);
      if (userConnections.get(userId).size === 0) {
        userConnections.delete(userId);
      }
      console.log(`WebSocket: 用户 ${userId} 断开连接`);
    }
  });
  
  // 发送欢迎消息
  ws.send(JSON.stringify({
    type: 'welcome',
    message: "欢迎连接到WebSocket服务器。请发送身份验证消息。"
  }));
});

// 启动服务器
server.listen(CONFIG.PORT, () => {
  console.log(`服务器已在端口 ${CONFIG.PORT} 上启动`);
  console.log(`WebSocket 地址: ws://localhost:${CONFIG.PORT}/ws`);
  console.log(`数据存储目录: ${CONFIG.DATA_DIR}`);
  console.log(`会话存储目录: ${CONFIG.SESSION_DIR}`);
});

// 向用户广播消息的辅助函数
function broadcastToUser(userId, message) {
  if (!userConnections.has(userId)) {
    return { 
      success: false, 
      message: "用户没有活跃连接",
      activeConnections: 0
    };
  }
  
  const connections = userConnections.get(userId);
  let messagesSent = 0;
  
  connections.forEach((ws) => {
    if (ws.readyState === 1) { // WebSocket.OPEN 的值是 1
      ws.send(JSON.stringify(message));
      messagesSent++;
    }
  });
  
  return {
    success: messagesSent > 0,
    message: messagesSent > 0 
      ? `消息已发送到${messagesSent}个连接` 
      : "没有活跃连接可接收消息",
    activeConnections: messagesSent,
    totalConnections: connections.size
  };
}

// 提供给其他模块使用的广播函数
export { broadcastToUser };