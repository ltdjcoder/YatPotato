/**
 * this code is generated by AI basically
 * 
 * 配置文件加载器
 * Configuration file loader
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// 默认配置
const defaultConfig = {
  server: {
    url: "http://localhost:3000",
    port: 3000,
    host: "localhost"
  },
  client: {
    defaultServerUrl: "http://localhost:3000",
    timeout: 30000,
    retryAttempts: 3
  },
  websocket: {
    url: "ws://localhost:3000/ws",
    reconnectInterval: 5000,
    maxReconnectAttempts: 10
  },
  data: {
    dataDir: "./remote-data",
    sessionDir: "./remote-sessions"
  },
  session: {
    secret: "yat-potato-secret-key",
    maxAge: 86400000
  }
};

let config = null;

/**
 * 加载配置文件
 */
function loadConfig(configPath = null) {
  if (config) {
    return config;
  }

  // 如果没有指定配置文件路径，使用默认路径
  if (!configPath) {
    configPath = path.join(__dirname, 'config.json');
  }

  try {
    // 尝试读取配置文件
    if (fs.existsSync(configPath)) {
      const configData = fs.readFileSync(configPath, 'utf8');
      const fileConfig = JSON.parse(configData);
      
      // 合并默认配置和文件配置
      config = mergeConfig(defaultConfig, fileConfig);
      console.log(`[Config] 配置文件已加载: ${configPath}`);
    } else {
      // 如果配置文件不存在，使用默认配置
      config = { ...defaultConfig };
      console.log(`[Config] 配置文件不存在，使用默认配置: ${configPath}`);
    }
  } catch (error) {
    console.error(`[Config] 配置文件加载失败: ${error.message}`);
    console.log('[Config] 使用默认配置');
    config = { ...defaultConfig };
  }

  // 从环境变量覆盖配置
  overrideFromEnv(config);

  return config;
}

/**
 * 深度合并配置对象
 */
function mergeConfig(defaultConfig, userConfig) {
  const result = { ...defaultConfig };
  
  for (const key in userConfig) {
    if (userConfig.hasOwnProperty(key)) {
      if (typeof userConfig[key] === 'object' && userConfig[key] !== null && !Array.isArray(userConfig[key])) {
        result[key] = mergeConfig(defaultConfig[key] || {}, userConfig[key]);
      } else {
        result[key] = userConfig[key];
      }
    }
  }
  
  return result;
}

/**
 * 从环境变量覆盖配置
 */
function overrideFromEnv(config) {
  // 服务器配置
  if (process.env.SERVER_PORT) {
    config.server.port = parseInt(process.env.SERVER_PORT);
  }
  if (process.env.SERVER_HOST) {
    config.server.host = process.env.SERVER_HOST;
  }
  if (process.env.SERVER_URL) {
    config.server.url = process.env.SERVER_URL;
    config.client.defaultServerUrl = process.env.SERVER_URL;
  }

  // WebSocket配置
  if (process.env.WEBSOCKET_URL) {
    config.websocket.url = process.env.WEBSOCKET_URL;
  }

  // 数据目录配置
  if (process.env.DATA_DIR) {
    config.data.dataDir = process.env.DATA_DIR;
  }
  if (process.env.SESSION_DIR) {
    config.data.sessionDir = process.env.SESSION_DIR;
  }

  // 会话配置
  if (process.env.SESSION_SECRET) {
    config.session.secret = process.env.SESSION_SECRET;
  }

  // 更新服务器URL
  if (config.server.host && config.server.port) {
    const protocol = config.server.port === 443 ? 'https' : 'http';
    const wsProtocol = config.server.port === 443 ? 'wss' : 'ws';
    config.server.url = `${protocol}://${config.server.host}:${config.server.port}`;
    config.client.defaultServerUrl = config.server.url;
    config.websocket.url = `${wsProtocol}://${config.server.host}:${config.server.port}/ws`;
  }
}

/**
 * 获取配置
 */
function getConfig() {
  return loadConfig();
}

/**
 * 重新加载配置
 */
function reloadConfig(configPath = null) {
  config = null;
  return loadConfig(configPath);
}

/**
 * 保存配置到文件
 */
function saveConfig(newConfig, configPath = null) {
  if (!configPath) {
    configPath = path.join(__dirname, 'config.json');
  }

  try {
    fs.writeFileSync(configPath, JSON.stringify(newConfig, null, 2), 'utf8');
    console.log(`[Config] 配置已保存到: ${configPath}`);
    config = newConfig;
    return true;
  } catch (error) {
    console.error(`[Config] 配置保存失败: ${error.message}`);
    return false;
  }
}

export { loadConfig, getConfig, reloadConfig, saveConfig };
export default getConfig;
