/**
 * this code is generated by AI basically
 */

export {loadLocalServer, LocalServer, LocalServerUtils};

import fs from 'fs';
import path from 'path';

// 本地服务器类
class LocalServer {
    constructor(componentId, userId, dataDirectory = './data') {
        this.componentId = componentId;
        this.userId = userId;
        this.dataDirectory = dataDirectory;
        this.userDataDirectory = path.join(dataDirectory, componentId, userId);
        
        // 确保目录存在
        this.ensureDirectoriesExist();
    }

    // 确保数据目录存在
    ensureDirectoriesExist() {
        try {
            fs.mkdirSync(this.userDataDirectory, { recursive: true });
        } catch (error) {
            console.error('创建目录失败:', error);
        }
    }

    // 获取文件路径
    getFilePath(key) {
        const fileName = `${key}.json`;
        return path.join(this.userDataDirectory, fileName);
    }

    // 保存数据到文件
    save(key, data) {
        try {
            this.ensureDirectoriesExist();
            
            const filePath = this.getFilePath(key);
            const jsonData = JSON.stringify(data, null, 2);
            
            fs.writeFileSync(filePath, jsonData, 'utf8');
            
            console.log(`[LocalServer] 保存成功: ${this.componentId}/${this.userId}/${key}`);
            return true;
        } catch (error) {
            console.error(`[LocalServer] 保存失败 ${key}:`, error);
            throw error;
        }
    }    
    
    // 从文件加载数据
    load(key) {
        try {
            const filePath = this.getFilePath(key);
            
            // 检查文件是否存在
            try {
                fs.accessSync(filePath);
            } catch {
                // 文件不存在，静默返回null
                return null;
            }
            
            const jsonData = fs.readFileSync(filePath, 'utf8');
            const data = JSON.parse(jsonData);
            
            console.log(`[LocalServer] 加载成功: ${this.componentId}/${this.userId}/${key}`);
            return data;
        } catch (error) {
            console.error(`[LocalServer] 加载失败 ${key}:`, error);
            return null;
        }
    }

    // 删除数据文件
    delete(key) {
        try {
            const filePath = this.getFilePath(key);
            fs.unlinkSync(filePath);
            console.log(`[LocalServer] 删除成功: ${this.componentId}/${this.userId}/${key}`);
            return true;
        } catch (error) {
            console.error(`[LocalServer] 删除失败 ${key}:`, error);
            return false;
        }
    }

    // 列出所有存储的键
    listKeys() {
        try {
            this.ensureDirectoriesExist();
            const files = fs.readdirSync(this.userDataDirectory);
            const keys = files
                .filter(file => file.endsWith('.json'))
                .map(file => file.replace('.json', ''));
            
            console.log(`[LocalServer] 找到 ${keys.length} 个数据文件: ${this.componentId}/${this.userId}`);
            return keys;
        } catch (error) {
            console.error(`[LocalServer] 列出键失败:`, error);
            return [];
        }
    }

    // 清空用户的所有数据
    clearAll() {
        try {
            const keys = this.listKeys();
            for (const key of keys) {
                this.delete(key);
            }
            console.log(`[LocalServer] 清空完成: ${this.componentId}/${this.userId}`);
            return true;
        } catch (error) {
            console.error(`[LocalServer] 清空失败:`, error);
            return false;
        }
    }

    // 获取数据文件信息
    getFileInfo(key) {
        try {
            const filePath = this.getFilePath(key);
            const stats = fs.statSync(filePath);
            return {
                size: stats.size,
                created: stats.birthtime,
                modified: stats.mtime,
                path: filePath
            };
        } catch (error) {
            console.error(`[LocalServer] 获取文件信息失败 ${key}:`, error);
            return null;
        }
    }
}

// 工厂函数 - 每次都创建新实例
function loadLocalServer(componentId, userId, dataDirectory = './data') {
    return new LocalServer(componentId, userId, dataDirectory);
}

// 静态方法类 - 提供跨实例的管理功能
class LocalServerUtils {
    // 获取所有组件ID
    static getAllComponents(dataDirectory = './data') {
        try {
            const dirs = fs.readdirSync(dataDirectory);
            const components = [];
            
            for (const dir of dirs) {
                const stats = fs.statSync(path.join(dataDirectory, dir));
                if (stats.isDirectory()) {
                    components.push(dir);
                }
            }
            
            return components;
        } catch (error) {
            console.error('获取组件列表失败:', error);
            return [];
        }
    }

    // 获取特定组件下的所有用户ID
    static getAllUsers(componentId, dataDirectory = './data') {
        try {
            const componentDir = path.join(dataDirectory, componentId);
            const dirs = fs.readdirSync(componentDir);
            const users = [];
            
            for (const dir of dirs) {
                const stats = fs.statSync(path.join(componentDir, dir));
                if (stats.isDirectory()) {
                    users.push(dir);
                }
            }
            
            return users;
        } catch (error) {
            console.error(`获取用户列表失败 [${componentId}]:`, error);
            return [];
        }
    }

    // 获取特定组件和用户的所有键
    static getAllKeys(componentId, userId, dataDirectory = './data') {
        try {
            const userDir = path.join(dataDirectory, componentId, userId);
            const files = fs.readdirSync(userDir);
            const keys = files
                .filter(file => file.endsWith('.json'))
                .map(file => file.replace('.json', ''));
            
            return keys;
        } catch (error) {
            console.error(`获取键列表失败 [${componentId}/${userId}]:`, error);
            return [];
        }
    }

    // 删除整个组件的数据
    static deleteComponent(componentId, dataDirectory = './data') {
        try {
            const componentDir = path.join(dataDirectory, componentId);
            fs.rmSync(componentDir, { recursive: true, force: true });
            console.log(`[LocalServerUtils] 删除组件数据: ${componentId}`);
            return true;
        } catch (error) {
            console.error(`删除组件数据失败 [${componentId}]:`, error);
            return false;
        }
    }

    // 删除特定用户的数据
    static deleteUser(componentId, userId, dataDirectory = './data') {
        try {
            const userDir = path.join(dataDirectory, componentId, userId);
            fs.rmSync(userDir, { recursive: true, force: true });
            console.log(`[LocalServerUtils] 删除用户数据: ${componentId}/${userId}`);
            return true;
        } catch (error) {
            console.error(`删除用户数据失败 [${componentId}/${userId}]:`, error);
            return false;
        }
    }
}

