/**
 * this code is generated by AI basically
 * 
 * RemoteClient.js - 远程数据存储客户端
 * 提供与LocalServer相同的接口，但数据存储在远程服务器
 */

// 导入需要的模块
import WebSocket from 'ws';  // 服务端使用
import fetch from 'node-fetch';  // 服务端使用
import { getConfig } from './config.js';

// RemoteClient类 - 远程服务器客户端
class RemoteClient {
    constructor(componentId, userId, serverUrl = null) {
        // 如果没有指定服务器URL，从配置文件获取
        if (!serverUrl) {
            const config = getConfig();
            serverUrl = config.client.defaultServerUrl;
        }
        
        this.componentId = componentId;
        this.userId = userId;
        this.serverUrl = serverUrl;
        this.apiBase = `${serverUrl}/api`;
        this.ws = null;
        this.connected = false;
        this.authenticated = false;
        this.authToken = null;
        this.updateListeners = new Map();
        
        // Cookie管理（Node.js环境需要）
        this.cookies = new Map();
        this.isNodeJs = typeof window === 'undefined';
        
        // 自动检查登录状态
        this.checkLoginStatus().catch(err => console.error('[RemoteClient] 初始化登录检查失败:', err));
    }    // 初始化WebSocket连接
    initWebSocket() {
        // 浏览器环境和Node环境WebSocket创建方式不同
        const isNodeJs = typeof window === 'undefined';
        
        // 关闭已存在的连接
        if (this.ws) {
            this.ws.close();
        }
        
        // WebSocket地址 - 从配置获取或基于服务器URL生成
        let wsUrl;
        if (isNodeJs) {
            const config = getConfig();
            wsUrl = config.websocket.url;
        } else {
            // 浏览器环境下生成WebSocket URL
            wsUrl = `${this.serverUrl.replace(/^http/, 'ws')}/ws`;
        }
        
        try {
            if (isNodeJs) {
                // Node.js环境
                this.ws = new WebSocket(wsUrl);
            } else {
                // 浏览器环境
                this.ws = new window.WebSocket(wsUrl);
            }
            
            this.setupWebSocketHandlers();
        } catch (error) {
            console.error('[RemoteClient] WebSocket连接初始化失败:', error);
            
            // 延迟重试
            setTimeout(() => this.initWebSocket(), 5000);
        }
    }
    
    // 设置WebSocket事件处理
    setupWebSocketHandlers() {
        this.ws.onopen = () => {
            console.log('[RemoteClient] WebSocket连接已建立');
            this.connected = true;
            
            // 如果已经登录，发送认证信息
            if (this.authenticated && this.userId) {
                this.authenticateWebSocket();
            }
        };
        
        this.ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                
                switch (message.type) {
                    case 'welcome':
                        console.log('[RemoteClient] 服务器欢迎消息:', message.message);
                        break;
                        
                    case 'auth_result':
                        if (message.success) {
                            console.log('[RemoteClient] WebSocket认证成功');
                        } else {
                            console.error('[RemoteClient] WebSocket认证失败:', message.message);
                        }
                        break;
                        
                    case 'dataUpdate':
                        this.handleDataUpdate(message);
                        break;
                        
                    case 'error':
                        console.error('[RemoteClient] 服务器错误:', message.message);
                        break;
                        
                    default:
                        console.log('[RemoteClient] 收到未知类型消息:', message);
                }
                
            } catch (error) {
                console.error('[RemoteClient] 处理WebSocket消息出错:', error);
            }
        };
        
        this.ws.onclose = () => {
            console.log('[RemoteClient] WebSocket连接已关闭');
            this.connected = false;
            
            // 5秒后尝试重连
            setTimeout(() => {
                if (this.authenticated) {
                    this.initWebSocket();
                }
            }, 5000);
        };
        
        this.ws.onerror = (error) => {
            console.error('[RemoteClient] WebSocket错误:', error);
        };
    }
    
    // WebSocket认证
    authenticateWebSocket() {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'auth',
                username: this.userId,
                password: this.password // 使用密码而非token
            }));
        }
    }
    
    // 处理数据更新消息
    handleDataUpdate(message) {
        const { key } = message;
        console.log(`[RemoteClient] 数据更新通知: ${this.componentId}/${key}`);
        
        // 触发特定key的更新事件
        this.triggerUpdateListeners(`update:${key}`, { key, ...message });
        
        // 触发通用更新事件（传递key参数）
        this.triggerUpdateListeners('update', { key, ...message });
    }
    
    // 触发更新事件监听器
    triggerUpdateListeners(event, data) {
        if (this.updateListeners.has(event)) {
            this.updateListeners.get(event).forEach(callback => {
                try {
                    callback(data.key);
                } catch (error) {
                    console.error(`[RemoteClient] 事件处理器错误 (${event}):`, error);
                }
            });
        }
    }
    
    // 检查登录状态
    async checkLoginStatus() {
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/auth/status`);
            const data = await response.json();
            
            this.authenticated = data.loggedIn;
            
            if (data.loggedIn) {
                if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
                    this.initWebSocket();
                }
            }
            
            return data;
        } catch (error) {
            console.error('[RemoteClient] 检查登录状态失败:', error);
            return { loggedIn: false };
        }
    }

    async isLoggedIn() {
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/auth/status`);
            const data = await response.json();
            return data.loggedIn;
        } catch (error) {
            console.error('[RemoteClient] 检查登录状态失败:', error);
            return false;
        }
    }
    
    // 登录
    async login(username, password) {
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/auth/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password })
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.authenticated = true;
                this.userId = data.userId;
                this.password = password; // 保存密码用于WebSocket认证
                
                // 初始化WebSocket连接
                this.initWebSocket();
            } else {
                this.authenticated = false;
            }
            
            return data;
        } catch (error) {
            console.error('[RemoteClient] 登录失败:', error);
            return { success: false, message: '网络错误' };
        }
    }
      // 登出
    async logout() {
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/auth/logout`, {
                method: 'POST'
            });
            
            const data = await response.json();
            
            if (data.success) {
                this.authenticated = false;
                this.userId = null;
                this.authToken = null;
                
                // 清空cookies
                this.clearCookies();
                
                // 关闭WebSocket连接
                if (this.ws) {
                    this.ws.close();
                    this.ws = null;
                }
            }
            
            return data;
        } catch (error) {
            console.error('[RemoteClient] 登出失败:', error);
            return { success: false, message: '网络错误' };
        }
    }
    
    // ----- 以下是与LocalServer兼容的API -----
    
    // 保存数据
    async save(key, data) {
        await this.ensureAuthenticated();
        
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/data/${this.componentId}/${key}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log(`[RemoteClient] 保存成功: ${this.componentId}/${key}`);
                return true;
            } else {
                console.error(`[RemoteClient] 保存失败 ${key}:`, result.message);
                throw new Error(result.message || '保存失败');
            }
        } catch (error) {
            console.error(`[RemoteClient] 保存错误 ${key}:`, error);
            throw error;
        }
    }
    
    // 加载数据
    async load(key) {
        await this.ensureAuthenticated();
        
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/data/${this.componentId}/${key}`);
            
            if (response.status === 404) {
                // 数据不存在，返回null（与LocalServer行为一致）
                return null;
            }
            
            const result = await response.json();
            
            if (result.success) {
                console.log(`[RemoteClient] 加载成功: ${this.componentId}/${key}`);
                return result.data;
            } else {
                console.error(`[RemoteClient] 加载失败 ${key}:`, result.message);
                return null;
            }
        } catch (error) {
            console.error(`[RemoteClient] 加载错误 ${key}:`, error);
            return null;
        }
    }
    
    // 删除数据
    async delete(key) {
        await this.ensureAuthenticated();
        
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/data/${this.componentId}/${key}`, {
                method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (result.success) {
                console.log(`[RemoteClient] 删除成功: ${this.componentId}/${key}`);
                return true;
            } else {
                console.error(`[RemoteClient] 删除失败 ${key}:`, result.message);
                return false;
            }
        } catch (error) {
            console.error(`[RemoteClient] 删除错误 ${key}:`, error);
            return false;
        }
    }
    
    // 列出所有键
    async listKeys() {
        await this.ensureAuthenticated();
        
        try {
            const response = await this.fetchWithCredentials(`${this.apiBase}/keys/${this.componentId}`);
            const result = await response.json();
            
            if (result.success) {
                console.log(`[RemoteClient] 列出键成功: ${this.componentId}`);
                return result.keys || [];
            } else {
                console.error('[RemoteClient] 列出键失败:', result.message);
                return [];
            }
        } catch (error) {
            console.error('[RemoteClient] 列出键错误:', error);
            return [];
        }
    }
    
    // 清空所有数据
    async clearAll() {
        const keys = await this.listKeys();
        let success = true;
        
        for (const key of keys) {
            const result = await this.delete(key);
            if (!result) success = false;
        }
        
        if (success) {
            console.log(`[RemoteClient] 清空数据成功: ${this.componentId}`);
        } else {
            console.error(`[RemoteClient] 清空数据部分失败: ${this.componentId}`);
        }
        
        return success;
    }
    
    // 获取文件信息（简化版本）
    async getFileInfo(key) {
        const exists = await this.load(key) !== null;
        
        return {
            exists: exists,
            remote: true,
            componentId: this.componentId,
            key: key,
            userId: this.userId
        };
    }
    
    // ----- 事件订阅机制 -----
    
    // 注册更新事件监听器
    onUpdate(callback) {
        this.registerUpdateListener('update', callback);
        return this;
    }
    
    // 注册特定key的更新事件监听器
    onKeyUpdate(key, callback) {
        this.registerUpdateListener(`update:${key}`, callback);
        return this;
    }
    
    // 注册更新监听器
    registerUpdateListener(event, callback) {
        if (!this.updateListeners.has(event)) {
            this.updateListeners.set(event, new Set());
        }
        this.updateListeners.get(event).add(callback);
    }
    
    // 移除更新监听器
    unregisterUpdateListener(event, callback) {
        if (this.updateListeners.has(event)) {
            this.updateListeners.get(event).delete(callback);
        }
    }
    
    // ----- 工具方法 -----
    
    // 确保已登录
    async ensureAuthenticated() {
        if (!this.authenticated) {
            const status = await this.checkLoginStatus();
            if (!status.loggedIn) {
                throw new Error('未登录');
            }
        }
        
        // 确保WebSocket已连接并认证
        if (this.ws && this.ws.readyState === WebSocket.CONNECTING) {
            await new Promise(resolve => setTimeout(resolve, 500)); // 给WebSocket连接一点时间
        }
    }
      // 包装fetch调用，自动处理凭据和cookie
    async fetchWithCredentials(url, options = {}) {
        const fetchOptions = {
            ...options,
            credentials: 'include'
        };
        
        // 在Node.js环境中需要手动处理cookies
        if (this.isNodeJs && this.cookies.size > 0) {
            const cookieHeader = Array.from(this.cookies.entries())
                .map(([name, value]) => `${name}=${value}`)
                .join('; ');
            
            fetchOptions.headers = {
                ...fetchOptions.headers,
                'Cookie': cookieHeader
            };
        }
        
        let response;
        // 使用正确的fetch函数
        if (typeof fetch !== 'undefined') {
            response = await fetch(url, fetchOptions);
        } else if (typeof window !== 'undefined' && window.fetch) {
            response = await window.fetch(url, fetchOptions);
        } else {
            throw new Error('fetch不可用');
        }
        
        // 在Node.js环境中提取Set-Cookie头部
        if (this.isNodeJs && response.headers.get('set-cookie')) {
            this.extractCookiesFromResponse(response);
        }
        
        return response;
    }
    
    // 从响应中提取cookies（仅Node.js环境）
    extractCookiesFromResponse(response) {
        const setCookieHeader = response.headers.get('set-cookie');
        if (setCookieHeader) {
            // set-cookie可能是数组或字符串
            const cookies = Array.isArray(setCookieHeader) ? setCookieHeader : [setCookieHeader];
            
            cookies.forEach(cookieStr => {
                // 解析cookie字符串
                const parts = cookieStr.split(';');
                const [nameValue] = parts;
                const [name, value] = nameValue.split('=');
                
                if (name && value) {
                    this.cookies.set(name.trim(), value.trim());
                    console.log(`[RemoteClient] 保存cookie: ${name.trim()}=${value.trim()}`);
                }
            });
        }
    }
    
    // 清空cookies
    clearCookies() {
        this.cookies.clear();
        console.log('[RemoteClient] 已清空所有cookies');
    }
}

// 工厂函数 - 类似于loadLocalServer
function loadRemoteClient(componentId, userId, serverUrl = null) {
    // 如果没有指定服务器URL，从配置文件获取
    if (!serverUrl) {
        const config = getConfig();
        serverUrl = config.client.defaultServerUrl;
    }
    return new RemoteClient(componentId, userId, serverUrl);
}

// 静态工具类
class RemoteClientUtils {
    // 检查登录状态
    static async isLoggedIn(serverUrl = null) {
        // 如果没有指定服务器URL，从配置文件获取
        if (!serverUrl) {
            const config = getConfig();
            serverUrl = config.client.defaultServerUrl;
        }
        try {
            const response = await fetch(`${serverUrl}/api/auth/status`, {
                credentials: 'include'
            });
            
            const data = await response.json();
            return data.loggedIn;
        } catch (error) {
            console.error('[RemoteClientUtils] 检查登录状态失败:', error);
            return false;
        }
    }
    
    // 获取当前用户所有组件
    static async getAllComponents(serverUrl = 'http://localhost:3000') {
        try {
            const response = await fetch(`${serverUrl}/api/components`, {
                credentials: 'include'
            });
            
            const result = await response.json();
            
            if (result.success) {
                return result.components;
            } else {
                console.error('[RemoteClientUtils] 获取组件列表失败:', result.message);
                return [];
            }
        } catch (error) {
            console.error('[RemoteClientUtils] 获取组件列表错误:', error);
            return [];
        }
    }
    
    // 获取特定组件的所有用户（需要管理权限）
    static async getAllUsersForComponent(componentId, serverUrl = 'http://localhost:3000') {
        try {
            const response = await fetch(`${serverUrl}/api/component/${componentId}/users`, {
                credentials: 'include'
            });
            
            const result = await response.json();
            
            if (result.success) {
                return result.users;
            } else {
                console.error(`[RemoteClientUtils] 获取组件用户失败 [${componentId}]:`, result.message);
                return [];
            }
        } catch (error) {
            console.error(`[RemoteClientUtils] 获取组件用户错误 [${componentId}]:`, error);
            return [];
        }
    }
}


export { loadRemoteClient, RemoteClient, RemoteClientUtils };
export default loadRemoteClient;